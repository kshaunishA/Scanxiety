//
//  ContentView.swift
//  BarcodeScanner
//
//  Created by Kshaunish Addala on 2025-07-29.
//

import SwiftUI

struct ContentView: View {
    @State private var receipt: String?
    @State private var isLoading = false
    @State private var errorMsg: String?
    @State private var showingShareSheet = false

    var body: some View {
        VStack(spacing: 20) {
            if isLoading {
                ProgressView("Calculating emotional toll…")
                    .foregroundColor(.primary)
            } else if let receipt = receipt {
                ScrollView {
                    Text(receipt)
                        .font(.system(.body, design: .monospaced))
                        .padding()
                }
                
                HStack(spacing: 15) {
                    Button(action: {
                        showingShareSheet = true
                    }) {
                        HStack {
                            Image(systemName: "square.and.arrow.down")
                            Text("Save Receipt")
                        }
                    }
                    .padding()
                    .background(Color.green)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                    
                    Button("Scan Another Soul") {
                        self.receipt = nil
                        self.errorMsg = nil
                    }
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
            } else if let err = errorMsg {
                VStack {
                    Text("⚠️ Emotional Processing Error")
                        .font(.headline)
                        .foregroundColor(.red)
                    Text(err)
                        .foregroundColor(.red)
                        .multilineTextAlignment(.center)
                }
                Button("Retry Emotional Analysis") {
                    self.errorMsg = nil
                }
                .padding()
                .background(Color.red)
                .foregroundColor(.white)
                .cornerRadius(8)
            } else {
                BarcodeScannerView { image in
                    Task { await handleImageCapture(image) }
                }
                .overlay(alignment: .bottom) {
                    VStack {
                        Text("SCANXIETY™")
                            .font(.headline)
                            .fontWeight(.bold)
                        Text("Point camera at any object")
                        Text("to reveal its emotional cost")
                            .font(.caption)
                    }
                    .padding(12)
                    .background(.black.opacity(0.7))
                    .foregroundColor(.white)
                    .cornerRadius(8)
                    .padding(.bottom, 100)
                }
            }
        }
        .animation(.easeInOut, value: isLoading)
        .padding()
        .sheet(isPresented: $showingShareSheet) {
            ShareSheet(activityItems: shareItems)
        }
    }
    
    // Computed property to generate share items
    private var shareItems: [Any] {
        guard let receipt = receipt else { return [] }
        
        let textReceipt = generateShareableReceipt(receipt)
        var items: [Any] = [textReceipt]
        
        // Add image version if available
        if let imageReceipt = generateReceiptImage(receipt) {
            items.append(imageReceipt)
        }
        
        return items
    }

    @MainActor
    private func handleImageCapture(_ image: UIImage) async {
        isLoading = true
        do {
            let info = try await OpenAIHelper.fetchInfo(for: image)
            receipt = ReceiptFormatter.make(from: info)
        } catch {
            errorMsg = error.localizedDescription
        }
        isLoading = false
    }
    
    private func generateShareableReceipt(_ receipt: String) -> String {
        let timestamp = DateFormatter.localizedString(from: Date(), dateStyle: .full, timeStyle: .long)
        
        return """
        \(receipt)
        
        ────────────────────────────────────
        
        Generated by Scanxiety™
        The Emotional Barcode Scanner
        \(timestamp)
        
        "Sometimes a purchase says more than just $2.99 
        — it says, 'You're trying to fill a void.'"
        """
    }
    
    private func generateReceiptImage(_ receipt: String) -> UIImage? {
        let fullReceipt = generateShareableReceipt(receipt)
        
        // Create image from text
        let textView = UITextView()
        textView.text = fullReceipt
        textView.font = UIFont.monospacedSystemFont(ofSize: 14, weight: .regular)
        textView.textColor = .black
        textView.backgroundColor = .white
        textView.textAlignment = .left
        textView.isEditable = false
        textView.isScrollEnabled = false
        
        // Calculate size needed
        let maxSize = CGSize(width: 400, height: CGFloat.greatestFiniteMagnitude)
        let textSize = textView.sizeThatFits(maxSize)
        
        // Add padding
        let imageSize = CGSize(width: textSize.width + 40, height: textSize.height + 40)
        textView.frame = CGRect(x: 20, y: 20, width: textSize.width, height: textSize.height)
        
        // Create container view
        let containerView = UIView(frame: CGRect(origin: .zero, size: imageSize))
        containerView.backgroundColor = .white
        containerView.addSubview(textView)
        
        // Convert to image
        UIGraphicsBeginImageContextWithOptions(imageSize, true, 0)
        defer { UIGraphicsEndImageContext() }
        
        guard let context = UIGraphicsGetCurrentContext() else { return nil }
        containerView.layer.render(in: context)
        
        return UIGraphicsGetImageFromCurrentImageContext()
    }
}

struct ShareSheet: UIViewControllerRepresentable {
    let activityItems: [Any]
    
    func makeUIViewController(context: Context) -> UIActivityViewController {
        let controller = UIActivityViewController(activityItems: activityItems, applicationActivities: nil)
        
        // Exclude some activities that don't make sense for receipts
        controller.excludedActivityTypes = [
            .assignToContact,
            .addToReadingList,
            .openInIBooks
        ]
        
        return controller
    }
    
    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}
